use chaincode_transition with type  components.ChaincodeTransitionsClass and default "new components.ChaincodeTransitionsClass()"!
use result with type  components.Result and default "new components.Result(\"chaincode\")"!

To start passivate in waitForInput!
Passivate in StopState!


when in waitForInput and receive From_G5_to_G13 go to Execute_bussiness_logic!
external event for waitForInput with From_G5_to_G13
<%
    Result incomingResult = result.update(messageList.get(0).getData());
    result.reset(incomingResult);
    
%>!

when in waitForInput and receive stop go to StopState!

generates output on From_G13_to_G5 with type Result!
generates output on stop !

accepts input on From_G5_to_G13 with type Result !


hold in Execute_bussiness_logic for time 5!
from Execute_bussiness_logic go to waitForInput!
internal event for Execute_bussiness_logic
<%
    chaincode_transition.execute_bussiness_logic_runner(result);
%>!

after Execute_bussiness_logic output From_G13_to_G5!
output event for Execute_bussiness_logic
<%
    output.add(outFrom_G13_to_G5, result);
%>!
          


// EndSequence for sequence starting at Execute_bussiness_logic