use peer_transition with type  components.PeerTransitionsClass and default "new components.PeerTransitionsClass()"!
use result with type  components.Result and default "new components.Result(\"peer\")"!

To start passivate in waitForInput!
Passivate in StopState!


when in waitForInput and receive From_G0_to_G4 go to Calculate_transaction_result!
external event for waitForInput with From_G0_to_G4
<%
    Result incomingResult = result.update(messageList.get(0).getData());
    result.reset(incomingResult);
    
%>!

when in waitForInput and receive From_G13_to_G5 go to Execute_bussiness_logic_continue!
external event for waitForInput with From_G13_to_G5
<%
    result = result.update(messageList.get(0).getData());
    
%>!

when in waitForInput and receive stop go to StopState!

generates output on From_G5_to_G13 with type Result!
generates output on From_G4_to_G0 with type Result!
generates output on stop !

accepts input on From_G13_to_G5 with type Result !
accepts input on From_G0_to_G4 with type Result !


hold in Calculate_transaction_result for time 5!
from Calculate_transaction_result go to Invoke_chaincode!
internal event for Calculate_transaction_result
<%
    peer_transition.calculate_transaction_result_runner(result);
%>!


hold in Invoke_chaincode for time 5!
from Invoke_chaincode go to waitForInput!
internal event for Invoke_chaincode
<%
    peer_transition.invoke_chaincode_runner(result);
%>!

after Invoke_chaincode output From_G5_to_G13!
output event for Invoke_chaincode
<%
    output.add(outFrom_G5_to_G13, result);
%>!
          


hold in Execute_bussiness_logic_continue for time 5!
from Execute_bussiness_logic_continue go to Return_contract_execution_result!
internal event for Execute_bussiness_logic_continue
<%
    peer_transition.execute_bussiness_logic_continue_runner(result);
%>!


hold in Return_contract_execution_result for time 5!
from Return_contract_execution_result go to waitForInput!
internal event for Return_contract_execution_result
<%
    peer_transition.return_contract_execution_result_runner(result);
%>!

after Return_contract_execution_result output From_G4_to_G0!
output event for Return_contract_execution_result
<%
    output.add(outFrom_G4_to_G0, result);
%>!
          


// EndSequence for sequence starting at Calculate_transaction_result