use peer_transition with type  components.PeerTransitionsClass and default "new PeerTransitionsClass()"!

To start passivate in waitForInput!

when in waitForInput and receive from_G13_to_G5_input go to Invocar_o_chaincode!
when in waitForInput and receive from_G0_to_G4_input go to Calcular_resultado_da_transacao!

generates output on from_G5_to_G13 with type String!
generates output on from_G4_to_G0 with type String!

accepts input on from_G13_to_G5_input with type String!
accepts input on from_G0_to_G4_input with type String!

hold in Calcular_resultado_da_transacao for time 5!
from Calcular_resultado_da_transacao go to Invocar_o_chaincode!
internal event for Calcular_resultado_da_transacao
<%
    peer_transition.calcular_resultado_da_transacao_runner();
%>!

hold in Invocar_o_chaincode for time 5!
from Invocar_o_chaincode go to Enviar_resultado_para_api!
internal event for Invocar_o_chaincode
<%
    peer_transition.invocar_o_chaincode_runner();
%>!

hold in Enviar_resultado_para_api for time 5!
from Enviar_resultado_para_api go to output_state!
internal event for Enviar_resultado_para_api
<%
    peer_transition.enviar_resultado_para_api_runner();
%>!

// EndSequence for sequence starting at Calcular_resultado_da_transacao

hold in output_state for time 5!
from output_state go to waitForInput!

after output_state output MESSAGE_OUTPUT!