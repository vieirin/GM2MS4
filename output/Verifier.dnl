use verifier_transition with type  components.VerifierTransitionsClass and default "new VerifierTransitionsClass()"!

To start passivate in waitForInput!

when in waitForInput and receive from_G1_to_G0_input go to Registrar_uma_transacao!
when in waitForInput and receive from_G4_to_G0_input go to Registrar_uma_transacao!
when in waitForInput and receive from_G7_to_G0_input go to Registrar_uma_transacao!

generates output on from_G0_to_G1 with type String!
generates output on from_G0_to_G4 with type String!
generates output on from_G0_to_G7 with type String!

accepts input on from_G1_to_G0_input with type String!
accepts input on from_G4_to_G0_input with type String!
accepts input on from_G7_to_G0_input with type String!

hold in Registrar_uma_transacao for time 5!
from Registrar_uma_transacao go to output_state!
internal event for Registrar_uma_transacao
<%
    verifier_transition.registrar_uma_transacao_runner();
%>!

// EndSequence for sequence starting at Registrar_uma_transacao

hold in output_state for time 5!
from output_state go to waitForInput!

after output_state output MESSAGE_OUTPUT!