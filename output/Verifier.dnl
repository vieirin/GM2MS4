use verifier_transition with type  components.VerifierTransitionsClass and default "new components.VerifierTransitionsClass()"!
use result with type  components.Result and default "new components.Result(\"verifier\")"!

To start passivate in waitForInput!
Passivate in StopState!


when in waitForInput and receive From_G1_to_G0 go to Find_the_target_peers_continue!
external event for waitForInput with From_G1_to_G0
<%
    result = result.update(messageList.get(0).getData());
    
%>!
when in waitForInput and receive From_G2_to_G0 go to Send_trasaction_request_to_peers_continue!
external event for waitForInput with From_G2_to_G0
<%
    result = result.update(messageList.get(0).getData());
    
%>!
when in waitForInput and receive From_G4_to_G0 go to Calculate_transaction_result_continue!
external event for waitForInput with From_G4_to_G0
<%
    result = result.update(messageList.get(0).getData());
    
%>!
when in waitForInput and receive From_G7_to_G0 go to Receive_result_pool_continue!
external event for waitForInput with From_G7_to_G0
<%
    result = result.update(messageList.get(0).getData());
    
%>!

when in waitForInput and receive StartUp go to Register_a_transaction!
external event for waitForInput with StartUp
<%
    String in = messageList.get(0).getData();
    result = new Result("verifier", in);
%>!

generates output on From_G0_to_G1 with type Result!
generates output on From_G0_to_G2 with type Result!
generates output on From_G0_to_G4 with type Result!
generates output on From_G0_to_G7 with type Result!
generates output on stop !

accepts input on From_G1_to_G0 with type Result !
accepts input on From_G2_to_G0 with type Result !
accepts input on From_G4_to_G0 with type Result !
accepts input on From_G7_to_G0 with type Result !
accepts input on StartUp with type String !

hold in Register_a_transaction for time 5!
from Register_a_transaction go to Find_the_target_peers!


hold in Find_the_target_peers for time 5!
from Find_the_target_peers go to waitForInput!

after Find_the_target_peers output From_G0_to_G1!
output event for Find_the_target_peers
<%
    output.add(outFrom_G0_to_G1, result);
%>!
          


hold in Find_the_target_peers_continue for time 5!
from Find_the_target_peers_continue go to Send_trasaction_request_to_peers!
internal event for Find_the_target_peers_continue
<%
    verifier_transition.find_the_target_peers_continue_runner(result);
%>!


hold in Send_trasaction_request_to_peers for time 5!
from Send_trasaction_request_to_peers go to waitForInput!

after Send_trasaction_request_to_peers output From_G0_to_G2!
output event for Send_trasaction_request_to_peers
<%
    output.add(outFrom_G0_to_G2, result);
%>!
          


hold in Send_trasaction_request_to_peers_continue for time 5!
from Send_trasaction_request_to_peers_continue go to Calculate_transaction_result!
internal event for Send_trasaction_request_to_peers_continue
<%
    verifier_transition.send_trasaction_request_to_peers_continue_runner(result);
%>!


hold in Calculate_transaction_result for time 5!
from Calculate_transaction_result go to waitForInput!

after Calculate_transaction_result output From_G0_to_G4!
output event for Calculate_transaction_result
<%
    output.add(outFrom_G0_to_G4, result);
%>!
          


hold in Calculate_transaction_result_continue for time 5!
from Calculate_transaction_result_continue go to Receive_result_pool!
internal event for Calculate_transaction_result_continue
<%
    verifier_transition.calculate_transaction_result_continue_runner(result);
%>!


hold in Receive_result_pool for time 5!
from Receive_result_pool go to waitForInput!

after Receive_result_pool output From_G0_to_G7!
output event for Receive_result_pool
<%
    output.add(outFrom_G0_to_G7, result);
%>!
          


hold in Receive_result_pool_continue for time 5!
from Receive_result_pool_continue go to StopState!
internal event for Receive_result_pool_continue
<%
    verifier_transition.receive_result_pool_continue_runner(result);
    Display.getDefault().asyncExec(new Runnable() {
	            public void run() {
		   	        MessageDialog.openInformation(new Shell(), "Simulation result", result.isSuccess() ? "Simulation has passed" : "Simulation has failed");
	            }
        });
%>!

after Receive_result_pool_continue output stop!


// EndSequence for sequence starting at Register_a_transaction


add library
<%
	import components.Result;
	import org.eclipse.jface.dialogs.MessageDialog;
    import org.eclipse.swt.widgets.Shell;
    import org.eclipse.swt.widgets.Display;
%>!